package com.to.let.bd.adapters.pick_photo;import android.content.Context;import android.graphics.PorterDuff;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Build;import android.support.v4.content.ContextCompat;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.Toast;import com.bumptech.glide.Glide;import com.to.let.bd.R;import com.to.let.bd.activities.MediaActivity;import com.to.let.bd.model.pick_photo.PickData;import com.to.let.bd.model.pick_photo.PickHolder;import com.to.let.bd.utils.AppConstants;import com.to.let.bd.utils.pick_photo.PickConfig;import com.to.let.bd.utils.pick_photo.PickUtils;import java.lang.ref.WeakReference;import java.util.ArrayList;public class PickGridAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {    private ArrayList<String> imagePaths;    private int spanCount;    private int selectIconColor;    private ArrayList<String> selectPath;    private Context context;    private int scaleSize;    public int maxSelectSize = 3;    public PickGridAdapter(Context context, ArrayList<String> imagePaths, PickData pickData, int maxSelectSize) {        this.context = context;        this.imagePaths = imagePaths;        this.spanCount = pickData.getSpanCount();        this.selectIconColor = pickData.getSelectIconColor();        this.maxSelectSize = maxSelectSize;        selectPath = new ArrayList<>();        buildScaleSize();    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        return new GridImageViewHolder(LayoutInflater.from(context).inflate(R.layout.pick_item_grid_layout, parent, false));    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (holder instanceof GridImageViewHolder) {            String path = imagePaths.get(position);            GridImageViewHolder gridImageViewHolder = (GridImageViewHolder) holder;            gridImageViewHolder.bindItem(path);        }    }    @Override    public int getItemViewType(int position) {        return position;    }    @Override    public int getItemCount() {        return imagePaths.size();    }    @Override    public void onViewRecycled(RecyclerView.ViewHolder holder) {        if (holder instanceof GridImageViewHolder) {            GridImageViewHolder gridImageViewHolder = (GridImageViewHolder) holder;            Glide.with(context).clear(gridImageViewHolder.weekImage);        }        super.onViewRecycled(holder);    }    // ViewHolder    private class GridImageViewHolder extends RecyclerView.ViewHolder {        private ImageView selectImage, weekImage;        private FrameLayout selectLayout;        GridImageViewHolder(View itemView) {            super(itemView);            ImageView gridImage = itemView.findViewById(R.id.iv_grid);            selectImage = itemView.findViewById(R.id.iv_select);            selectLayout = itemView.findViewById(R.id.frame_select_layout);            RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) gridImage.getLayoutParams();            params.width = scaleSize;            params.height = scaleSize;            final WeakReference<ImageView> imageViewWeakReference = new WeakReference<>(gridImage);            weekImage = imageViewWeakReference.get();        }        void bindItem(final String path) {            if (selectPath.contains(path)) {                select();            } else {                unSelect();            }            if (weekImage != null) {                Glide.with(context)                        .load(Uri.parse("file://" + path))                        .into(weekImage);                selectLayout.setTag(R.id.pick_image_path, path);                selectLayout.setOnClickListener(moreClick);                weekImage.setTag(R.id.pick_image_path, path);                weekImage.setOnClickListener(moreClick);            }        }        void select() {            Drawable drawable = ContextCompat.getDrawable(context, R.mipmap.pick_ic_select);            drawable.clearColorFilter();            drawable.setColorFilter(selectIconColor, PorterDuff.Mode.SRC_ATOP);            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {                selectImage.setBackground(ContextCompat.getDrawable(context, R.mipmap.pick_ic_select));            } else {                //noinspection deprecation                selectImage.setBackgroundDrawable(ContextCompat.getDrawable(context, R.mipmap.pick_ic_select));            }            selectImage.setTag(R.id.pick_is_select, true);        }        void unSelect() {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {                selectImage.setBackground(ContextCompat.getDrawable(context, R.mipmap.pick_ic_un_select));            } else {                //noinspection deprecation                selectImage.setBackgroundDrawable(ContextCompat.getDrawable(context, R.mipmap.pick_ic_un_select));            }            selectImage.setTag(R.id.pick_is_select, false);        }        void addPath(String path) {            selectPath.add(path);            PickHolder.setStringPaths(selectPath);            if (context instanceof MediaActivity) {                ((MediaActivity) context).addNewImage(path);            }        }        void removePath(String path) {            selectPath.remove(path);            PickHolder.setStringPaths(selectPath);            if (context instanceof MediaActivity) {                ((MediaActivity) context).removeImage(path);            }        }        View.OnClickListener moreClick = new View.OnClickListener() {            @Override            public void onClick(View v) {                String path = (String) v.getTag(R.id.pick_image_path);                boolean isSelect = (boolean) selectImage.getTag(R.id.pick_is_select);                if (isSelect) {                    if (selectPath.contains(path)) {                        unSelect();                        removePath(path);                    }                } else {                    if (selectPath.size() < maxSelectSize) {                        if (!selectPath.contains(path)) {                            select();                            addPath(path);                        }                    } else {                        Toast.makeText(context, String.format(context.getString(R.string.pick_photo_size_limit),                                String.valueOf(AppConstants.maximumImage)), Toast.LENGTH_LONG).show();                    }                }            }        };    }    private void buildScaleSize() {        int screenWidth = PickUtils.getInstance(context).getWidthPixels();        int space = PickUtils.getInstance(context).dp2px(PickConfig.ITEM_SPACE);        scaleSize = (screenWidth - (spanCount + 1) * space) / spanCount;    }    public ArrayList<String> getSelectPath() {        return selectPath;    }    //    public void setSelectPath(ArrayList<String> selectPath) {//        this.selectPath = selectPath;//    }////    private Handler handler = new Handler(Looper.getMainLooper());//    public void updateMaxsize(int maxSelectSize) {//        this.maxSelectSize = maxSelectSize;//    }}